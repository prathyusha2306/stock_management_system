package com.jfsfeb.stockmanagementsystemjdbc.controller;

import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import com.jfsfeb.stockmanagementsystemjdbc.dto.DetailsOfStock;
import com.jfsfeb.stockmanagementsystemjdbc.dto.Investor;
import com.jfsfeb.stockmanagementsystemjdbc.dto.Manager;
import com.jfsfeb.stockmanagementsystemjdbc.exception.ExceptionSMS;
import com.jfsfeb.stockmanagementsystemjdbc.factory.SMSFactory;
import com.jfsfeb.stockmanagementsystemjdbc.service.AdminService;
import com.jfsfeb.stockmanagementsystemjdbc.service.InvestorService;
import com.jfsfeb.stockmanagementsystemjdbc.service.ManagerService;

import lombok.extern.log4j.Log4j;

@Log4j
public class SMSControllerJdbc {
	private static AdminService service = SMSFactory.getAdminServicesInstance();
	private static InvestorService investorService = SMSFactory.getInvestorServiceInstance();
	private static ManagerService managerService = SMSFactory.getManagerServiceInstance();

	public static Scanner scanner = new Scanner(System.in);

	public static int checkChoice() {
		boolean flag = false;
		int choice = 0;
		do {
			try {
				choice = scanner.nextInt();
				flag = true;
			} catch (InputMismatchException e) {
				flag = false;
				System.err.println("Invalid Choice, It Should Contain Only Digits");
				scanner.next();
			}
		} while (!flag);
		return choice;
	}

	public static String checkRole() {
		String role = null;
		boolean flag = false;
		do {
			role = scanner.next();
			if (role.equalsIgnoreCase("admin") || role.equalsIgnoreCase("manager")
					|| role.equalsIgnoreCase("investor")) {
				flag = true;
			} else {
				System.err.println("Enter role value either user or admin");
				flag = false;
			}
		} while (!flag);
		return role.toLowerCase();
	}

	public static void stockMangement() {
		Manager manager;
		Investor investor;
		int choice = 0;
		int adminchoice = 0;
		int investorChoice = 0;
		int managerChoice = 0;
		String email = null;
		String password = null;
		int investorId = 0;
		String name = null;
		String emailId = null;
		String newPassword = null;
		String oldPassword = null;
		Long mobileNumber = null;
		int managerId = 0;
		String managerEmailId = null;
		String managerPassword = null;
		int stockId = 0;
		String stockName = null;
		DetailsOfStock stock;
		String role = null;
		String stockType = null;
		double stockPrice = 0;
		boolean isAvailable;

		do

		{
			try {
				log.info(
						"-------------------------------------------------------WELCOME TO STOCK MAGANEMENT-------------------------------------------------------------------");
				log.info("[1] ADMIN PAGE");
				log.info("[2] INVESTOR PAGE");
				log.info("[3] MANAGER PAGE");
				log.info(
						"------------------------------------------------------------------------------------------------------------------------------------------------");
				choice = checkChoice();
				switch (choice) {

				case 1:

					do {

						log.info(
								"------------------------------------------------------------------------------------------------------------------------------------");
						log.info("[1] ADMINISTRATION LOGIN");
						log.info("[2] EXIT");
						log.info(
								"---------------------------------------------------------------------------------------------------------------------------------------");
						choice = checkChoice();
						switch (choice) {

						case 1:
							log.info("Enter registered email to login : ");
							email = scanner.next();
							log.info("Enter registered Password to login : ");
							password = scanner.next();
							try {
								service.authenticateAdmin(email, password);

								log.info("You have logged in successfully");
								log.info("Now you can perform the following operations:-");
								do {
									try {
										log.info(
												"---------------------------------------------------------------------------------------------------------------------");
										log.info("[1] ADD INVESTORS");
										log.info("[2] ADD COMPANY MANAGER");
										log.info("[3] VIEW ALL INVESTORS");
										log.info("[4] ISSUE STOCK");
										log.info("[5] LOGOUT");
										log.info(
												"----------------------------------------------------------------------------------------------------------------------");
										adminchoice = checkChoice();
										switch (adminchoice) {
										case 1:
											investor = new Investor();
											log.info("Enter the Details to Register New User");
											investorId = (int) (Math.random() * 1000);
											if (investorId <= 100) {
												investorId = investorId + 100;
											}
											scanner.nextLine();
											log.info("Enter the User Name");
											name = scanner.next();
											log.info("Enter the Mobile Number");
											mobileNumber = scanner.nextLong();
											log.info("Enter The Password");
											password = scanner.next();
											log.info("Enter the Email Id");
											emailId = scanner.next();
											System.out.println("Enter the Role");
											role = checkRole();

											investor.setUserId(investorId);
											investor.setName(name);
											investor.setEmailId(emailId);
											investor.setPassword(password);
											investor.setMobileNumber(mobileNumber);
											investor.setRole(role);

											try {
												boolean isInvestorAdded = service.addInvestor(investor);
												if (isInvestorAdded) {
													log.info("New User Added Successfully");
												}
											} catch (ExceptionSMS e) {
												System.err.println(e.getMessage());
											}
											break;

										case 2:
											manager = new Manager();
											log.info("Enter the Details to Register New manager");
											managerId = (int) (Math.random() * 1000);
											if (managerId <= 100) {
												managerId = managerId + 100;
											}
											log.info("Enter the manager Name");
											name = scanner.next();
											log.info("Enter the Email Id");
											emailId = scanner.next();
											log.info("Enter The Password");
											password = scanner.next();
											manager.setManagerId(managerId);
											manager.setEmail(emailId);
											manager.setName(name);
											manager.setPassword(password);

											try {
												boolean isManagerAdded = service.addCompanyManager(manager);
												if (isManagerAdded) {
													log.info("New Manager Added Successfully");
												}
											} catch (ExceptionSMS e) {
												System.err.println(e.getMessage());
											}
											break;

										case 3:
											try {
												List<Investor> userList = service.viewInvestors();
												System.out.println("Users Present in Database are:");
												System.out.println(String.format("%-10s %-20s %-25s %-15s %-15s %-5s",
														"USER ID", "USER NAME", "MOBILE NUMBER", "PASSWORD", "EMAIL ID",
														"ROLE"));

												for (Investor investorInfo : userList) {
													System.out.println(String.format(
															"%-10s %-20s %-25s %-15s %-15s %-5s %-10s",
															investorInfo.getUserId(), investorInfo.getName(),
															investorInfo.getMobileNumber(), investorInfo.getPassword(),
															investorInfo.getEmailId(), investorInfo.getRole()));
												}
											} catch (ExceptionSMS e) {
												System.err.println(e.getMessage());
											}

											break;

										case 4:
											System.out.println("Enter Request Id");
											int requestId = scanner.nextInt();
											try {
												boolean isIssued = service.issueStock(requestId);
												if (isIssued) {
													System.out.println("Book Issued to the User");
												}
											} catch (ExceptionSMS e) {
												System.err.println(e.getMessage());
											}
											break;
									case 5:
										default:
											break;
										}
									} catch (InputMismatchException e) {

										System.err.println("Invalid entry please provide only positive integer");

									}
								} while (true);
							} catch (Exception e) {
								log.info("Invalid Credentials");
							}
						}

					} while (true);

				case 2:
					do {
						try {
							log.info(
									"------------------------------------------------------------------------------------------------------------------------------");
							log.info("[1] INVESTOR REGISTER");
							log.info("[2] INVESTOR LOGIN");
							log.info("[3] EXIT");
							log.info(
									"-------------------------------------------------------------------------------------------------------------------------------");
							investorChoice = checkChoice();
							switch (investorChoice) {

							case 1:
								log.info("Enter Name to Register : ");
								name = scanner.next();
								log.info("Enter MobileNumber to Register : ");
								mobileNumber = scanner.nextLong();
								log.info("Enter Email to Register : ");
								emailId = scanner.next();
								log.info("Enter Password :");
								password = scanner.next();

								Investor investorReg = new Investor();
								investorReg.setName(name);

								investorReg.setPassword(password);

								boolean check = investorService.registerInvestor(investorReg);
								if (check) {
									log.info("You have registered Successfully");
								} else {
									log.info("Already registered");
								}
								break;
							case 2:
								log.info("Enter registered name to login : ");
								name = scanner.next();
								log.info("Enter registered Password to login : ");
								password = scanner.next();
								log.info("Logged in Successfully");
								log.info("Now you can perform the following operations:-");
								do {
									try {
										log.info(
												"<--------------------------------------------------------------------->");
										log.info("[1]   CHANGE PASSWORD");
										log.info("[2]  BUY STOCK");
										log.info("[3]  SELL STOCK");

										log.info("[4] LOGOUT");
										log.info(
												"<--------------------------------------------------------------------->");
										choice = checkChoice();
										switch (choice) {
										case 1:
 
											log.info("Change Password");
											log.info("-------------------------");
											log.info("Enter User Email Id");
											emailId = scanner.next();
											log.info("Enter Old Password");
											oldPassword = scanner.next();
											log.info("Enter New Password");
											newPassword = scanner.next();

											try {
												investorService.changePassword(emailId, password, newPassword);
												log.info("Password Changed Successfully");
											} catch (ExceptionSMS e) {
												System.err.println(e.getMessage());
											}
											break;

										case 2:
											System.out.println("Enter User Id");
											investorId = scanner.nextInt();
											System.out.println("Enter Stock Id");
											stockId = scanner.nextInt();
											investorService.stockRequest(investorId, stockId);
											
											try {
												
												log.info("Request Successfully Placed to Admin");
											} catch (ExceptionSMS e) {
												System.err.println(e.getMessage());
											}
											break;


										case 3:
//											log.info("Enter the Stock Id to delete : ");
//											 stockId = scanner.nextInt();
//											if (stockId == 0) {
//												log.info("Please Enter the Valid Stock Id");
//											} else {
//												stock = new DetailsOfStock();
//												stock.setStockId(stockId);
//												boolean remove = investorService.;
//												if (remove) {
//													log.info("The stock is removed of Id = " + stockId);
//												} else {
//													log.info("The stock is not removed of Id = " + stockId);
//												}
//											}
//											break;

										case 4:
											break;

										default:
											log.info("Invalid Choice");
											break;
										}

									} catch (InputMismatchException e) {
										System.err.println("Invalid entry please provide only positive integer");
										scanner.nextLine();
									}
								} while (true);

							case 3:
								break;

							default:
								log.info("Invalid Choice");
								break;
							}
						} catch (InputMismatchException e) {
							System.err.println("Invalid entry please provide only positive integer");
							scanner.nextLine();
						}
					} while (true);

				case 3:
					do {
						try {
							log.info(
									"<--------------------------<<MANAGER PAGE>>------------------------------------------->");
							log.info("[1] MANAGER LOGIN");
							log.info("[2] EXIT");
							System.out
									.println("<--------------------------------------------------------------------->");
							managerChoice = checkChoice();
							switch (managerChoice) {

							case 1:
								log.info("Enter registered email to login : ");
								managerEmailId = scanner.next();
								log.info("Enter registered Password to login : ");
								managerPassword = scanner.next();
								try {
//									managerService.authenticateManager(managerEmailId, managerPassword);
									;
									log.info("You have logged in successfully");
									log.info("Now you can perform the following operations:-");
									do {
										try {
											log.info(
													"<--------------------------------------------------------------------->");
											log.info("[1]  CHANGE PASSWORD");
											log.info("[2]  ADD STOCK");
											log.info("[3]  REMOVE STOCK");
											log.info("[4] LOGOUT");
											log.info(
													"<--------------------------------------------------------------------->");
											choice = scanner.nextInt();
											switch (choice) {
											case 1:

												log.info("Change Password");
												log.info("-------------------------");
												log.info("Enter User Email Id");
												managerEmailId = scanner.next();
												log.info("Enter Old Password");
												oldPassword = scanner.next();
												log.info("Enter New Password");
												newPassword = scanner.next();

												try {
													managerService.changePassword(emailId, oldPassword, newPassword);
													log.info("Password Changed Successfully");
												} catch (ExceptionSMS e) {
													System.err.println(e.getMessage());
												}
												break;

											case 2:

												DetailsOfStock stockDetails = new DetailsOfStock();
												System.out.println("Enter Stock details To add ");
												stockId = (int) (Math.random() * 1000);
												if (stockId <= 100) {
													stockId = stockId + 100;
												}
												scanner.nextLine();
												log.info("Enter the Stock Name");
												stockName = scanner.next();
												log.info("Enter the stock Type");
												stockType = scanner.next();
												log.info("Enter the price of stock");
												stockPrice = scanner.nextDouble();
												log.info("Set Book Availability");
												isAvailable = scanner.nextBoolean();

												stockDetails.setStockId(stockId);
												stockDetails.setStockName(stockName);
												stockDetails.setStockType(stockType);
												stockDetails.setStockPrice(stockPrice);
												;
												stockDetails.setAvailable(isAvailable);
												try {
													boolean isBookAdded = managerService.addStock(stockDetails);

													if (isBookAdded) {
														System.out.println("Stock Added Successfully");
													}
												} catch (ExceptionSMS e) {
													System.err.println(e.getMessage());
												}
												break;
											case 3:
												log.info("Enter the Stock Id to sell : ");
												stockId = scanner.nextInt();
												if (stockId == 0) {
													log.info("Please Enter the Valid StockId");
												} else {
													stock = new DetailsOfStock();
													stock.setStockId(stockId);
													boolean sell = managerService.removeStock(stockId);
													if (sell) {
														log.info("The stock is  selled of Id = " + stockId);
													} else {
														System.out
																.println("The stock is not selled of Id = " + stockId);
													}
												}
												break;

											case 0:
												break;

											default:
												log.info("Invalid Choice please provide 1 or 2 or 3 or 4 ");
												break;
											}
										} catch (InputMismatchException e) {
											System.err.println("Invalid entry please provide 1 or 2 ");
										} catch (Exception e) {
											log.info("Invalid Credentials");
										}
									} while (true);
								} catch (Exception e) {
									log.info("Invalid Credentials");
								}
								break;
							case 3:
								break;

							default:
								log.info("Invalid Choice please provide 1 or 2 or 3");
								break;
							}
						} catch (InputMismatchException e) {
							System.err.println("Invalid entry please provide 1 or 2 or 3");
							scanner.nextLine();
						}

					} while (true);
				default:
					System.err.println("choice should be in between 1 or 2 or 3");
					break;
				}

			} catch (InputMismatchException e) {
				System.err.println("Invalid entry please provide 1 or 2 or 3");
				scanner.nextLine();
			}
		} while (true);

	}
}
