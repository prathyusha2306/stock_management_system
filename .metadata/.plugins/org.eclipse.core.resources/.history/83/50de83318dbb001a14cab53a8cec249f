package com.jfsfeb.stockmanagementsystemjdbc.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import com.jfsfeb.stockmanagementsystemjdbc.dto.DetailsOfStock;
import com.jfsfeb.stockmanagementsystemjdbc.dto.Investor;
import com.jfsfeb.stockmanagementsystemjdbc.exception.ExceptionSMS;
import com.jfsfeb.stockmanagementsystemjdbc.utility.DBConnection;

public class DAOInvestorImple implements DAOInvestor{
	DBConnection dbConnector = new DBConnection();
	@Override
	public boolean investorLogin(String emailId, String password) {
		Investor info = new Investor();

		try (Connection connection = dbConnector.getConnection();
				PreparedStatement statement = connection.prepareStatement(dbConnector.getQuery("loginCheckAdmin"));) {
			statement.setString(1, emailId);
			statement.setString(2, password);
			try (ResultSet result = statement.executeQuery();) {
				while (result.next()) {
					info.setEmailId(result.getString("Emailid"));
					info.setPassword(result.getString("password"));

					return true;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		throw new ExceptionSMS("Invalid Login Credentials, Please Enter Correctly");
	}

	@Override
	public boolean changePassword(String emailId, String oldPassword, String newPassword) {
		try (Connection conn = dbConnector.getConnection();
				PreparedStatement pstmt = conn.prepareStatement(dbConnector.getQuery("changePassword"));) {
			pstmt.setString(1, newPassword);
			pstmt.setString(2, emailId);
			pstmt.setString(3, oldPassword);
			int count = pstmt.executeUpdate();
			if (count != 0) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();

		}
		throw new ExceptionSMS("Unable to Update the Password due to Invalid Credentials");
	}

	@Override
	public boolean sellStock(int stockId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean buyStock(DetailsOfStock stockDetails) {
		try (Connection conn = dbConnector.getConnection();
				PreparedStatement pstmt = conn.prepareStatement(dbConnector.getQuery("stockDetails"));) {
			pstmt.setInt(1, stockDetails.getStockId());
			pstmt.setString(2, stockDetails.getStockName());
			pstmt.setString(3, stockDetails.getStockType());
			pstmt.setDouble(4, stockDetails.getStockPrice());
			pstmt.executeUpdate();
		} catch (Exception e) {
			throw new ExceptionSMS("Stock Can't be Added, As it is Already Exists");
		}
		return true;
	}

	@Override
	public boolean stockRequest(int userId, int stockId) {
		boolean isAvailable = false;
		int reqestedBookId = 0;
		int validStockId = 0;
		int noOfRequests = 0;

		try (Connection conn = dbConnector.getConnection();
				Statement isRequestExist = conn.createStatement();
				PreparedStatement countReqPstmt = conn.prepareStatement(dbConnector.getQuery("countRequests"));
				PreparedStatement checkAvailPstmt = conn.prepareStatement(dbConnector.getQuery("checkAvailability"));
				PreparedStatement reqPstmt = conn.prepareStatement(dbConnector.getQuery("requeststock"));) {

			try (ResultSet resultSet = isRequestExist.executeQuery(dbConnector.getQuery("showRequests"))) {
				while (resultSet.next()) {
					reqestedBookId = resultSet.getInt("stock_id");
					if (reqestedBookId == stockId) {
						throw new ExceptionSMS("stock is Already Requested, So Request Can't be Placed");
					}
				}

			}
			countReqPstmt.setInt(1, userId);
						if (validStockId != 0) {
							if (isAvailable) {
								reqPstmt.setInt(1, userId);
								reqPstmt.setInt(2, stockId);
								reqPstmt.executeUpdate();

								RequestInfo requestInfo = new RequestInfo();
								requestInfo.setId(userId);
								requestInfo.setBookId(stockId);

								return true;
						} else {
							throw new ExceptionSMS("The Book You are Requested is Not Present in the Library");
						}
					}

		} catch (Exception e) {
			throw new ExceptionSMS(e.getMessage());
		}
	}
}
